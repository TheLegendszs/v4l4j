package au.edu.jcu.v4l4j.impl.omx;

import java.time.Duration;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import au.edu.jcu.v4l4j.api.control.CompositeControl;
import au.edu.jcu.v4l4j.api.control.Control;
import au.edu.jcu.v4l4j.api.control.ControlType;
import au.edu.jcu.v4l4j.impl.jni.StructPrototype;

/**
 * A root composite control that when push or pull is called, executes a 
 * @author mailmindlin
 */
public class OMXQueryControl implements CompositeControl {
	protected final OMXComponent component;
	protected final Set<Control<?>> children = new HashSet<>();
	protected transient Map<String, Control<?>> childMap;
	protected final String rootName;
	protected final int queryId;
	protected final StructPrototype struct;
	
	protected OMXQueryControl(OMXComponent component, String rootName, int queryId, StructPrototype struct) {
		this.component = component;
		this.rootName = rootName;
		this.queryId = queryId;
		this.struct = struct;
		
	}
	
	@Override
	public String getName() {
		return this.rootName;
	}

	@Override
	public Set<Control<?>> getChildren() {
		return this.children;
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Control<?> getChildByName(String name) {
		if (childMap == null) {
			for (Control<?> child : this.children)
				addToMap("", child);
		}
		
		return childMap.get(name);
	}
	
	protected void addToMap(String prefix, Control<?> child) {
		String name = prefix + (prefix.isEmpty() ? "" : ".") + child.getName();
		this.childMap.put(name, child);
		if (child.getType() == ControlType.COMPOSITE)
			for (Control<?> c : ((CompositeControl)child).getChildren())
				addToMap(name, c);
	}

	@Override
	public CompositeControlGetter<Map<String, Object>, Map<String, Object>> get() {
		return new OMXQueryControlGetter<>(null, null);
	}

	@Override
	public CompositeControlAccessor<Map<String, Object>, Void> access() {
		return new OMXQueryControlAccessor<>(null, null);
	}
	
	public class OMXQueryControlAccessor<T, R> implements CompositeControlAccessor<T, R> {
		protected final OMXQueryControlAccessor<T, ?> parent;
		protected final Duration timeout;
		
		protected OMXQueryControlAccessor(OMXQueryControlAccessor<T, ?> parent, Duration timeout) {
			this.parent = parent;
			this.timeout = timeout;
		}
		
		@Override
		public CompositeControlAccessor<T, R> setTimeout(Duration timeout) {
			//We can pass our parent ref to the child because we have the same state
			return new OMXQueryControlAccessor<>(doGetChildParent(), timeout);
		}

		@Override
		public OMXQueryControlGetter<T, T> get() {
			return new OMXQueryControlGetter<>(doGetChildParent(), this.timeout);
		}
		
		/**
		 * Get the parent reference that should be used for child objects
		 * generated by this object.
		 * @return
		 */
		protected OMXQueryControlAccessor<T, ?> doGetChildParent() {
			return this.parent;
		}
		
		/**
		 * Method that actually does stuff when invoked.
		 * @return Pointer to native memory, or 0 if none is allocated
		 * @throws Exception
		 */
		protected long doCall() throws Exception {
			if (this.parent == null)
				return 0;
			return this.parent.doCall();
		}

		@Override
		public R call() throws Exception {
			// TODO Auto-generated method stub
			return null;
		}
		
	}
	
	public class OMXQueryControlGetter<T, R> extends OMXQueryControlAccessor<T, R> implements CompositeControlGetter<T, R> {
		
		protected OMXQueryControlGetter(OMXQueryControlAccessor<T, ?> parent, Duration timeout) {
			super(parent, timeout);
		}
		
		@Override
		public OMXQueryControlGetter<T, R> setTimeout(Duration timeout) {
			return new OMXQueryControlGetter<>(doGetChildParent(), timeout);
		}

		@Override
		public OMXQueryControlGetter<T, R> read(Consumer<T> handler) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public <E> OMXQueryControlGetter<T, R> read(String name, Consumer<E> handler) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public OMXQueryControlUpdater<T, R> write(T value) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public OMXQueryControlUpdater<T, R> write(Supplier<T> supplier) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public <E> OMXQueryControlUpdater<T, R> write(String name, Supplier<E> supplier) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public <E> OMXQueryControlUpdater<T, R> write(String name, E value) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public OMXQueryControlUpdater<T, R> update(Function<T, T> mappingFunction) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public <E> OMXQueryControlUpdater<T, R> update(String name, Function<E, E> mappingFunction) {
			// TODO Auto-generated method stub
			return null;
		}
		
	}
	
	public class OMXQueryControlUpdater<T, R> extends OMXQueryControlGetter<T, R> implements CompositeControlUpdater<T, R> {

		protected OMXQueryControlUpdater(OMXQueryControlAccessor<T, ?> parent, Duration timeout) {
			super(parent, timeout);
		}

		@Override
		public OMXQueryControlUpdater<T, R> setTimeout(Duration timeout) {
			return new OMXQueryControlUpdater<>(doGetChildParent(), timeout);
		}

		@Override
		public OMXQueryControlAccessor<T, R> set() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public OMXQueryControlGetter<T, R> setAndGet() {
			// TODO Auto-generated method stub
			return null;
		}
		
	}

}
